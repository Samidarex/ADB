{"version":3,"sources":["api.js","App.js","registerServiceWorker.js","index.js"],"names":["client","endpoint","data","token","customHeaders","headers","customConfig","config","method","body","JSON","stringify","undefined","Authorization","window","fetch","then","response","a","json","responseData","ok","Promise","reject","MultiPageForm","React","MultiPageFormProvider","initialValues","props","initState","s","form","setFormValues","Provider","value","resetForm","useMultiPageForm","context","Error","Main","to","Page1","history","onSubmit","e","preventDefault","push","htmlFor","id","food","onChange","target","Page2","drink","Confirm","onClick","error","state","Success","location","message","App","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.90f5b142.chunk.js","sourcesContent":["function client(\n  endpoint,\n  {data, token, headers: customHeaders, ...customConfig} = {},\n) {\n  const config = {\n    method: data ? 'POST' : 'GET',\n    body: data ? JSON.stringify(data) : undefined,\n    headers: {\n      Authorization: token ? `Bearer ${token}` : undefined,\n      'Content-Type': data ? 'application/json' : undefined,\n      ...customHeaders,\n    },\n    ...customConfig,\n  }\n\n  return window.fetch(`/${endpoint}`, config).then(async (response) => {\n    const responseData = await response.json()\n    if (response.ok) {\n      return responseData\n    } else {\n      return Promise.reject(responseData)\n    }\n  })\n}\n\nconst savePost = (postData) => client(`post/${postData.id}`, {data: postData})\nconst loadGreeting = (subject) => client(`greeting`, {data: {subject}})\nconst reportError = (data) => client(`error`, {data})\nconst submitForm = (data) => client(`form`, {data})\n\nexport {savePost, loadGreeting, reportError, submitForm}\n","import * as React from 'react'\nimport {BrowserRouter as Router, Route, Link, Switch} from 'react-router-dom'\nimport {submitForm} from './api'\n\nconst MultiPageForm = React.createContext()\n\nfunction MultiPageFormProvider({initialValues = {}, ...props}) {\n  const [initState] = React.useState(initialValues)\n  const [form, setFormValues] = React.useReducer(\n    (s, a) => ({...s, ...a}),\n    initState,\n  )\n  const resetForm = () => setFormValues(initialValues)\n  return (\n    <MultiPageForm.Provider\n      value={{form, setFormValues, resetForm}}\n      {...props}\n    />\n  )\n}\n\nfunction useMultiPageForm() {\n  const context = React.useContext(MultiPageForm)\n  if (!context) {\n    throw new Error(\n      'useMultiPageForm must be used within a MiltiPageFormProvider',\n    )\n  }\n  return context\n}\n\nfunction Main() {\n  return (\n    <>\n      <h1>Welcome home</h1>\n      <Link to=\"/page-1\">Fill out the form</Link>\n    </>\n  )\n}\n\nfunction Page1({history}) {\n  const {form, setFormValues} = useMultiPageForm()\n  return (\n    <>\n      <h2>Page 1</h2>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          history.push('/page-2')\n        }}\n      >\n        <label htmlFor=\"food\">Favorite Food</label>\n        <input\n          id=\"food\"\n          value={form.food}\n          onChange={(e) => setFormValues({food: e.target.value})}\n        />\n      </form>\n      <Link to=\"/\">Go Home</Link> | <Link to=\"/page-2\">Next</Link>\n    </>\n  )\n}\n\nfunction Page2({history}) {\n  const {form, setFormValues} = useMultiPageForm()\n  return (\n    <>\n      <h2>Page 2</h2>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          history.push('/confirm')\n        }}\n      >\n        <label htmlFor=\"drink\">Favorite Drink</label>\n        <input\n          id=\"drink\"\n          value={form.drink}\n          onChange={(e) => setFormValues({drink: e.target.value})}\n        />\n      </form>\n      <Link to=\"/page-1\">Go Back</Link> | <Link to=\"/confirm\">Review</Link>\n    </>\n  )\n}\n\nfunction Confirm({history}) {\n  const {form, resetForm} = useMultiPageForm()\n  function handleConfirmClick() {\n    submitForm(form).then(\n      () => {\n        resetForm()\n        history.push('/success')\n      },\n      (error) => {\n        history.push('/error', {state: {error}})\n      },\n    )\n  }\n  return (\n    <>\n      <h2>Confirm</h2>\n      <div>\n        <strong>Please confirm your choices</strong>\n      </div>\n      <div>\n        <strong id=\"food-label\">Favorite Food</strong>:{' '}\n        <span aria-labelledby=\"food-label\">{form.food}</span>\n      </div>\n      <div>\n        <strong id=\"drink-label\">Favorite Drink</strong>:{' '}\n        <span aria-labelledby=\"drink-label\">{form.drink}</span>\n      </div>\n      <Link to=\"/page-2\">Go Back</Link> |{' '}\n      <button onClick={handleConfirmClick}>Confirm</button>\n    </>\n  )\n}\n\nfunction Success() {\n  return (\n    <>\n      <h2>Congrats. You did it.</h2>\n      <div>\n        <Link to=\"/\">Go home</Link>\n      </div>\n    </>\n  )\n}\n\nfunction Error({\n  location: {\n    state: {error},\n  },\n}) {\n  return (\n    <>\n      <div>Oh no. There was an error.</div>\n      <pre>{error.message}</pre>\n      <Link to=\"/\">Go Home</Link>\n      <Link to=\"/confirm\">Try again</Link>\n    </>\n  )\n}\n\nfunction App() {\n  return (\n    <MultiPageFormProvider initialValues={{food: '', drink: ''}}>\n      <Router>\n        <Switch>\n          <Route path=\"/page-1\" component={Page1} />\n          <Route path=\"/page-2\" component={Page2} />\n          <Route path=\"/confirm\" component={Confirm} />\n          <Route path=\"/success\" component={Success} />\n          <Route path=\"/error\" component={Error} />\n          <Route component={Main} />\n        </Switch>\n      </Router>\n    </MultiPageFormProvider>\n  )\n}\n\nexport default App\n\n/*\neslint\n  react/no-adjacent-inline-elements: \"off\",\n*/\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}